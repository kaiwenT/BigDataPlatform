<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hust.bigdataplatform.dao.mapper.CourseScaleMapper">
  <resultMap id="BaseResultMap" type="com.hust.bigdataplatform.model.CourseScale">
    <id column="course_id" jdbcType="VARCHAR" property="courseId" />
    <result column="attendance_rate" jdbcType="REAL" property="attendanceRate" />
    <result column="exercise_rate" jdbcType="REAL" property="exerciseRate" />
    <result column="experiment_rate" jdbcType="REAL" property="experimentRate" />
    <result column="exp_report_rate" jdbcType="REAL" property="expReportRate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    course_id, attendance_rate, exercise_rate, experiment_rate, exp_report_rate
  </sql>
  <select id="selectByExample" parameterType="com.hust.bigdataplatform.model.CourseScaleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_scale
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 'true' as QUERYID,
    <include refid="Base_Column_List" />
    from course_scale
    where course_id = #{courseId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from course_scale
    where course_id = #{courseId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.hust.bigdataplatform.model.CourseScaleExample">
    delete from course_scale
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hust.bigdataplatform.model.CourseScale">
    insert into course_scale (course_id, attendance_rate, exercise_rate, 
      experiment_rate, exp_report_rate)
    values (#{courseId,jdbcType=VARCHAR}, #{attendanceRate,jdbcType=REAL}, #{exerciseRate,jdbcType=REAL}, 
      #{experimentRate,jdbcType=REAL}, #{expReportRate,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="com.hust.bigdataplatform.model.CourseScale">
    insert into course_scale
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        course_id,
      </if>
      <if test="attendanceRate != null">
        attendance_rate,
      </if>
      <if test="exerciseRate != null">
        exercise_rate,
      </if>
      <if test="experimentRate != null">
        experiment_rate,
      </if>
      <if test="expReportRate != null">
        exp_report_rate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="courseId != null">
        #{courseId,jdbcType=VARCHAR},
      </if>
      <if test="attendanceRate != null">
        #{attendanceRate,jdbcType=REAL},
      </if>
      <if test="exerciseRate != null">
        #{exerciseRate,jdbcType=REAL},
      </if>
      <if test="experimentRate != null">
        #{experimentRate,jdbcType=REAL},
      </if>
      <if test="expReportRate != null">
        #{expReportRate,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hust.bigdataplatform.model.CourseScaleExample" resultType="java.lang.Long">
    select count(*) from course_scale
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update course_scale
    <set>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=VARCHAR},
      </if>
      <if test="record.attendanceRate != null">
        attendance_rate = #{record.attendanceRate,jdbcType=REAL},
      </if>
      <if test="record.exerciseRate != null">
        exercise_rate = #{record.exerciseRate,jdbcType=REAL},
      </if>
      <if test="record.experimentRate != null">
        experiment_rate = #{record.experimentRate,jdbcType=REAL},
      </if>
      <if test="record.expReportRate != null">
        exp_report_rate = #{record.expReportRate,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update course_scale
    set course_id = #{record.courseId,jdbcType=VARCHAR},
      attendance_rate = #{record.attendanceRate,jdbcType=REAL},
      exercise_rate = #{record.exerciseRate,jdbcType=REAL},
      experiment_rate = #{record.experimentRate,jdbcType=REAL},
      exp_report_rate = #{record.expReportRate,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hust.bigdataplatform.model.CourseScale">
    update course_scale
    <set>
      <if test="attendanceRate != null">
        attendance_rate = #{attendanceRate,jdbcType=REAL},
      </if>
      <if test="exerciseRate != null">
        exercise_rate = #{exerciseRate,jdbcType=REAL},
      </if>
      <if test="experimentRate != null">
        experiment_rate = #{experimentRate,jdbcType=REAL},
      </if>
      <if test="expReportRate != null">
        exp_report_rate = #{expReportRate,jdbcType=REAL},
      </if>
    </set>
    where course_id = #{courseId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hust.bigdataplatform.model.CourseScale">
    update course_scale
    set attendance_rate = #{attendanceRate,jdbcType=REAL},
      exercise_rate = #{exerciseRate,jdbcType=REAL},
      experiment_rate = #{experimentRate,jdbcType=REAL},
      exp_report_rate = #{expReportRate,jdbcType=REAL}
    where course_id = #{courseId,jdbcType=VARCHAR}
  </update>
</mapper>